/*! @name videojs-hls-stream-selector @version 0.1.0 @license MIT */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('video.js')) :
  typeof define === 'function' && define.amd ? define(['video.js'], factory) :
  (global = global || self, global.videojsHlsStreamSelector = factory(global.videojs));
}(this, function (videojs) { 'use strict';

  videojs = videojs && videojs.hasOwnProperty('default') ? videojs['default'] : videojs;

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  var version = "0.1.0";

  var MenuItem = videojs.getComponent("MenuItem");

  var _default =
  /*#__PURE__*/
  function (_MenuItem) {
    _inheritsLoose(_default, _MenuItem);

    function _default(player, _ref) {
      var _this;

      var id = _ref.id,
          bandwidth = _ref.bandwidth;
      var label = id;

      if (bandwidth) {
        label = parseFloat((bandwidth / 1000000).toFixed(1)) + " mbps";
      }

      _this = _MenuItem.call(this, player, {
        label: label,
        selectable: true,
        selected: false
      }) || this;
      _this.id = id;
      _this.bandwidth = bandwidth;
      return _this;
    }

    var _proto = _default.prototype;

    _proto.handleClick = function handleClick() {
      this.player().hlsStreamSelector().setState({
        currentItemId: this.id
      });
    };

    return _default;
  }(MenuItem);

  var MenuButton = videojs.getComponent("MenuButton");

  var _default$1 =
  /*#__PURE__*/
  function (_MenuButton) {
    _inheritsLoose(_default$1, _MenuButton);

    function _default$1(player) {
      var _this;

      _this = _MenuButton.call(this, player, {
        title: "Quality"
      }) || this; // set the control text

      _this.controlText("Quality"); // add a class to the button


      _this.addClass("vjs-hls-stream-selector-button"); // add the menu button icon


      _this.$(".vjs-icon-placeholder").classList.add("vjs-icon-cog"); // set the current item to "auto"


      _this.setCurrentItem("auto"); // listen for item selection


      _this.player().hlsStreamSelector().on("statechanged", function (_ref) {
        var changes = _ref.changes;

        if (changes && changes.currentItemId) {
          _this.setCurrentItem(changes.currentItemId.to);
        }
      });

      return _this;
    }

    var _proto = _default$1.prototype;

    _proto.createItems = function createItems() {
      var _this2 = this;

      var representations = this.player().tech({
        IWillNotUseThisInPlugins: true
      }).vhs.representations(); // filter out duplicate bandwidths and create menu items for each representation

      var items = representations.filter(function (_ref2, index) {
        var bandwidth = _ref2.bandwidth;
        return representations.findIndex(function (rep) {
          return rep.bandwidth === bandwidth;
        }) === index;
      }).map(function (_ref3) {
        var id = _ref3.id,
            bandwidth = _ref3.bandwidth;
        return new _default(_this2.player(), {
          id: id,
          bandwidth: bandwidth
        });
      }).sort(function (a, b) {
        return b.bandwidth - a.bandwidth;
      }); // add an "auto" option for streams with 2+ bandwidths

      if (items.length > 1) {
        items.push(new _default(this.player(), {
          id: "auto"
        }));
      }

      return items;
    };

    _proto.setCurrentItem = function setCurrentItem(id) {
      // select the current item by ID
      this.items.forEach(function (item) {
        return item.selected(item.id === id);
      }); // enable/disable the appropriate representations

      this.player().tech({
        IWillNotUseThisInPlugins: true
      }).vhs.representations().forEach(function (rep) {
        return rep.enabled(id === "auto" || rep.id === id);
      });
    };

    return _default$1;
  }(MenuButton);

  var Plugin = videojs.getPlugin("plugin"); // Default options for the plugin.

  var defaults = {};
  /**
   * An advanced Video.js plugin. For more information on the API
   *
   * See: https://blog.videojs.com/feature-spotlight-advanced-plugins/
   */

  var HlsStreamSelector =
  /*#__PURE__*/
  function (_Plugin) {
    _inheritsLoose(HlsStreamSelector, _Plugin);

    /**
     * Create a HlsStreamSelector plugin instance.
     *
     * @param  {Player} player
     *         A Video.js Player instance.
     *
     * @param  {Object} [options]
     *         An optional options object.
     *
     *         While not a core part of the Video.js plugin architecture, a
     *         second argument of options is a convenient way to accept inputs
     *         from your plugin's caller.
     */
    function HlsStreamSelector(player, options) {
      var _this;

      // the parent class will add player under this.player
      _this = _Plugin.call(this, player) || this;
      _this.options = videojs.mergeOptions(defaults, options);

      _this.player.on("loadedmetadata", function () {
        // make sure there is HLS before continuing
        if (_this.player.tech({
          IWillNotUseThisInPlugins: true
        }).vhs) {
          // add the class to the player
          _this.player.addClass("vjs-hls-stream-selector"); // add the button and menu to the control bar


          _this.player.controlBar.addChild(new _default$1(_this.player), {}, _this.player.controlBar.children().length - 2);
        }
      });

      return _this;
    }

    return HlsStreamSelector;
  }(Plugin); // Define default values for the plugin's `state` object here.


  HlsStreamSelector.defaultState = {}; // Include the version number.

  HlsStreamSelector.VERSION = version; // Register the plugin with video.js.

  videojs.registerPlugin("hlsStreamSelector", HlsStreamSelector);

  return HlsStreamSelector;

}));
