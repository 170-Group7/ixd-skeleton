(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('video.js')) :
	typeof define === 'function' && define.amd ? define(['video.js'], factory) :
	(global.videojsSnapshotComponent = factory(global.videojs));
}(this, (function (video) { 'use strict';

video = 'default' in video ? video['default'] : video;

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var videojs_imageCapture = createCommonjsModule(function (module) {
  (function (root, factory) {
    if (typeof undefined === 'function' && undefined.amd) {
      // AMD. Register as an anonymous module.
      undefined(['video.js'], factory);
    } else if ('object' === 'object' && module.exports) {
      // Node. Does not work with strict CommonJS, but
      // only CommonJS-like environments that support module.exports,
      // like Node.
      module.exports = factory(video);
    } else {
      // Browser globals (root is window)
      root.returnExports = factory(root.videojs);
    }
  })(commonjsGlobal, function (videojs) {
    var VjsComponent = videojs.getComponent('Component');
    /**
     * Audio-only engine for the lamejs library.
     *
     * @class
     * @augments videojs.RecordBase
     */
    videojs.ImageCaptureEngine = videojs.extend(VjsComponent, {

      /**
       * The constructor function for the class.
       *
       * @private
       * @param {(videojs.Player|Object)} player - Video.js player instance.
       * @param {Object} options - Player options.
       */
      constructor: function constructor(player, options) {
        VjsComponent.call(this, player, options);
      },
      formatTag: function formatTag(tag) {
        if (!tag) {
          return;
        }
        tag = tag.trim();
        if (tag.length === 0) {
          return;
        }
        return tag;
      },

      getDomByIdAndTag: function getDomByIdAndTag(id, tag) {
        tag = this.formatTag(tag);
        var dom = document.getElementById(id);
        if (!tag || tag.trim().length === 0) {
          return;
        }
        if (dom.tagName.toUpperCase() === tag.toUpperCase()) {
          return dom;
        }
        return dom.getElementsByTagName(tag)[0];
      },
      getScreenContainerDomByIdAndTag: function getScreenContainerDomByIdAndTag(id, tag) {
        tag = this.formatTag(tag);
        if (!!tag) {
          return this.getDomByIdAndTag(id, tag);
        }

        var dom = this.getDomByIdAndTag(id, 'object');
        if (!!dom) {
          return dom;
        }
        return this.getDomByIdAndTag(id, 'video');
      },

      drawCanvas: function drawCanvas(canvasDom, screenContainerDom) {
        canvasDom.width = screenContainerDom.videoWidth;
        canvasDom.height = screenContainerDom.videoHeight;
        canvasDom.getContext('2d').drawImage(screenContainerDom, 0, 0, canvasDom.width, canvasDom.height);
      },

      imageCaptureByDom: function imageCaptureByDom(screenContainerDom, canvasDom) {
        var snapshotImageData;
        if (!!screenContainerDom && screenContainerDom.tagName.toUpperCase() === "object".toUpperCase()) {
          //flash case
          snapshotImageData = screenContainerDom.vjs_snap();
        } else {
          this.drawCanvas(canvasDom, screenContainerDom);
          snapshotImageData = canvasDom.toDataURL('image/png');
        }
        return snapshotImageData;
      },

      imageCaptureById: function imageCaptureById(playerId, canvaserId) {

        return this.imageCaptureByDom(this.getScreenContainerDomByIdAndTag(playerId), this.getDomByIdAndTag(canvaserId, 'canvas'));
      },
      imageCaptureByIdAndCanvasDom: function imageCaptureByIdAndCanvasDom(playerId, canvaserDom) {

        return this.imageCaptureByDom(this.getScreenContainerDomByIdAndTag(playerId), canvaserDom);
      }
    });
  });
});

return videojs_imageCapture;

})));
